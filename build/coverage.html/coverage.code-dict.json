{"/home/travis/build/npmtest/node-npmtest-grunt-typescript/test.js":"/* istanbul instrument in package npmtest_grunt_typescript */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-typescript/lib.npmtest_grunt_typescript.js":"/* istanbul instrument in package npmtest_grunt_typescript */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_typescript = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_typescript = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-typescript/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-typescript && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_typescript */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_typescript\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_typescript.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_typescript.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_typescript.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_typescript.__dirname + '/lib.npmtest_grunt_typescript.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-typescript/node_modules/grunt-typescript/tasks/index.js":"///<reference path=\"../typings/typescript.d.ts\" />\r\n///<reference path=\"../typings/node.d.ts\" />\r\n///<reference path=\"../typings/grunt.d.ts\" />\r\n///<reference path=\"../typings/bluebird.d.ts\" />\r\nvar gts = require(\"./modules/task\");\r\nvar Promise = require(\"bluebird\");\r\nvar compiler = require(\"./modules/compiler\");\r\nfunction startup(grunt) {\r\n    grunt.registerMultiTask(\"typescript\", \"Compile typescript to javascript.\", function () {\r\n        var that = this, done = that.async(), promises = that.files.map(function (gruntFile) {\r\n            var task = new gts.Task(grunt, that.options({}), gruntFile);\r\n            return compiler.execute(task);\r\n        });\r\n        Promise.all(promises).then(function () {\r\n            done();\r\n        }).catch(function () {\r\n            done(false);\r\n        });\r\n    });\r\n}\r\nmodule.exports = startup;\r\n","/home/travis/build/npmtest/node-npmtest-grunt-typescript/node_modules/grunt-typescript/tasks/modules/task.js":"var option = require(\"./option\");\r\nvar host = require(\"./host\");\r\nfunction prepareStackTrace(error, structuredStackTrace) {\r\n    var lines = [];\r\n    for (var _i = 0; _i < structuredStackTrace.length; _i++) {\r\n        var trace = structuredStackTrace[_i];\r\n        lines.push((trace.getMethodName() || trace.getFunctionName() || \"<anonymous>\") + \"[L\" + trace.getLineNumber() + \"] \");\r\n    }\r\n    return lines;\r\n    //  \r\n    //   structuredStackTrace[0];\r\n    //  console.log(structuredStackTrace);\r\n    //  \r\n    //  \r\n    //  \r\n    //  return {\r\n    //    // method name\r\n    //    name: trace.getMethodName() || trace.getFunctionName() || \"<anonymous>\",\r\n    //    // file name\r\n    //    file: trace.getFileName(),\r\n    //    // line number\r\n    //    line: trace.getLineNumber(),\r\n    //    // column number\r\n    //    column: trace.getColumnNumber()\r\n    //  };\r\n}\r\nfunction getTrace(caller) {\r\n    var err = Error, original = err.prepareStackTrace, error = {};\r\n    err.captureStackTrace(error, caller || getTrace);\r\n    err.prepareStackTrace = prepareStackTrace;\r\n    var stack = error.stack;\r\n    err.prepareStackTrace = original;\r\n    return stack;\r\n}\r\nvar Task = (function () {\r\n    function Task(_grunt, _source, _gruntFile) {\r\n        this._grunt = _grunt;\r\n        this._source = _source;\r\n        this._gruntFile = _gruntFile;\r\n        this._initTime = 0;\r\n        this._initTime = Date.now();\r\n    }\r\n    Task.prototype.getGrunt = function () {\r\n        return this._grunt;\r\n    };\r\n    Task.prototype.getOptions = function () {\r\n        if (!this._options) {\r\n            this._options = option.createGruntOption(this._source, this._grunt, this._gruntFile, this);\r\n        }\r\n        return this._options;\r\n    };\r\n    Task.prototype.getHost = function () {\r\n        if (!this._host) {\r\n            this._host = host.createHost(this._grunt, this.getOptions(), this);\r\n        }\r\n        return this._host;\r\n    };\r\n    Task.prototype.verbose = function (message, stack) {\r\n        this._grunt.verbose.writeln((message + \" [\" + (Date.now() - this._initTime) + \"ms]\").grey);\r\n        if (stack) {\r\n            this._grunt.verbose.writeln(getTrace().join(\"\\n\").grey);\r\n        }\r\n    };\r\n    return Task;\r\n})();\r\nexports.Task = Task;\r\n","/home/travis/build/npmtest/node-npmtest-grunt-typescript/node_modules/grunt-typescript/tasks/modules/option.js":"///<reference path=\"../../typings/grunt.d.ts\" />\r\n///<reference path=\"./task.ts\" />\r\nvar util = require(\"./util\");\r\nvar ts = require(\"typescript\");\r\nvar _path = require(\"path\"), _fs = require(\"fs\");\r\nfunction prepareWatch(opt, files) {\r\n    var after = [], before = [], val = opt.watch, getDirNames = function (files) {\r\n        return files.map(function (file) {\r\n            if (_fs.existsSync(file)) {\r\n                if (_fs.statSync(file).isDirectory()) {\r\n                    return file;\r\n                }\r\n            }\r\n            else {\r\n                if (!_path.extname(file)) {\r\n                    return file;\r\n                }\r\n            }\r\n            return util.normalizePath(_path.resolve(_path.dirname(file)));\r\n        });\r\n    }, extractPath = function (files) {\r\n        var dirNames = getDirNames(files), result = dirNames.reduce(function (prev, curr) {\r\n            if (!prev) {\r\n                return curr;\r\n            }\r\n            var left = util.normalizePath(_path.relative(prev, curr)), right = util.normalizePath(_path.relative(curr, prev)), match = left.match(/^(\\.\\.(\\/)?)+/);\r\n            if (match) {\r\n                return util.normalizePath(_path.resolve(prev, match[0]));\r\n            }\r\n            match = right.match(/^(\\.\\.(\\/)?)+/);\r\n            if (match) {\r\n                return util.normalizePath(_path.resolve(curr, match[0]));\r\n            }\r\n            return prev;\r\n        }, undefined);\r\n        if (result) {\r\n            return [result];\r\n        }\r\n    };\r\n    if (!val) {\r\n        return undefined;\r\n    }\r\n    if (util.isStr(val) || util.isArray(val)) {\r\n        return {\r\n            path: util.isStr(val) ? [val] : val,\r\n            after: [],\r\n            before: [],\r\n            atBegin: false\r\n        };\r\n    }\r\n    if (util.isBool(val) && !!val) {\r\n        return {\r\n            path: extractPath(files),\r\n            after: [],\r\n            before: [],\r\n            atBegin: false\r\n        };\r\n    }\r\n    if (!val.path) {\r\n        val.path = extractPath(files);\r\n        if (!val.path) {\r\n            //util.writeWarn(\"Can't auto detect watch directory. Please place one or more files or set the path option.\");\r\n            return undefined;\r\n        }\r\n    }\r\n    if (val.after && !util.isArray(val.after)) {\r\n        after.push(val.after);\r\n    }\r\n    else if (util.isArray(val.after)) {\r\n        after = val.after;\r\n    }\r\n    if (val.before && !util.isArray(val.before)) {\r\n        before.push(val.before);\r\n    }\r\n    else if (util.isArray(val.before)) {\r\n        before = val.before;\r\n    }\r\n    return {\r\n        path: val.path,\r\n        after: after,\r\n        before: before,\r\n        atBegin: !!val.atBegin\r\n    };\r\n}\r\nfunction checkBasePath(opt) {\r\n    if (util.isUndef(opt.basePath)) {\r\n        return;\r\n    }\r\n    var result = \"\";\r\n    if (util.isStr(opt.basePath)) {\r\n        result = opt.basePath;\r\n    }\r\n    if (!result) {\r\n        return undefined;\r\n    }\r\n    result = util.normalizePath(result);\r\n    if (result.lastIndexOf(\"/\") !== result.length - 1) {\r\n        result = result + \"/\";\r\n    }\r\n    util.writeWarn(\"BasePath option has been deprecated. Method for determining an output directory has been changed in the same way as the TSC. \" +\r\n        \"Please re-set output directory with the new rootDir option or use keepDirectoryHierachy option. \" +\r\n        \"However, keepDirectoryHierachy option would not be available long.\");\r\n    return result;\r\n}\r\nfunction prepareTarget(opt) {\r\n    var result = 0 /* ES3 */;\r\n    if (opt.target) {\r\n        var temp = (opt.target + \"\").toLowerCase();\r\n        if (temp === 'es3') {\r\n            result = 0 /* ES3 */;\r\n        }\r\n        else if (temp == 'es5') {\r\n            result = 1 /* ES5 */;\r\n        }\r\n        else if (temp == \"es6\") {\r\n            result = 2 /* ES6 */;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction prepareModule(opt) {\r\n    var result = 0 /* None */;\r\n    if (opt.module) {\r\n        var temp = (opt.module + \"\").toLowerCase();\r\n        if (temp === \"commonjs\" || temp === \"node\") {\r\n            result = 1 /* CommonJS */;\r\n        }\r\n        else if (temp === \"amd\") {\r\n            result = 2 /* AMD */;\r\n        }\r\n        else if (temp === \"system\") {\r\n            result = 4 /* System */;\r\n        }\r\n        else if (temp === \"umd\") {\r\n            result = 3 /* UMD */;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction prepareNewLine(opt) {\r\n    var result = undefined;\r\n    if (opt.newLine) {\r\n        var temp = (opt.newLine + \"\").toLowerCase();\r\n        if (temp === \"crlf\") {\r\n            result = 0 /* CarriageReturnLineFeed */;\r\n        }\r\n        else if (temp === \"lf\") {\r\n            result = 1 /* LineFeed */;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction boolOrUndef(source, key, def) {\r\n    var result = util.isUndef(source[key]) ? undefined : !!source[key];\r\n    if (util.isUndef(result) && !util.isUndef(def)) {\r\n        result = def;\r\n    }\r\n    return result;\r\n}\r\nfunction prepareGenerateTsConfig(opt) {\r\n    var result = false;\r\n    if (!opt.generateTsConfig) {\r\n        return false;\r\n    }\r\n    if (util.isBool(opt.generateTsConfig)) {\r\n        return !!opt.generateTsConfig;\r\n    }\r\n    if (util.isStr(opt.generateTsConfig)) {\r\n        return opt.generateTsConfig + \"\";\r\n    }\r\n    return result;\r\n}\r\nfunction prepareJsx(opt) {\r\n    var jsx = (opt.jsx + \"\").toLowerCase();\r\n    return jsx === \"react\" ? 2 /* React */ :\r\n        jsx === \"preserve\" ? 1 /* Preserve */ : undefined;\r\n}\r\nfunction createGruntOption(source, grunt, gruntFile, logger) {\r\n    var dest = util.normalizePath(gruntFile.dest || \"\"), singleFile = !!dest && _path.extname(dest) === \".js\", targetVersion = prepareTarget(source), basePath = checkBasePath(source), rootDir = util.isStr(source.rootDir) ? source.rootDir : undefined, keepDirectoryHierarchy = boolOrUndef(source, \"keepDirectoryHierarchy\");\r\n    function getTargetFiles() {\r\n        return grunt.file.expand(gruntFile.orig.src);\r\n    }\r\n    function getReferences() {\r\n        var target, binPath = util.getBinDir();\r\n        if (!source.references) {\r\n            return [];\r\n        }\r\n        if (util.isStr(source.references)) {\r\n            target = [source.references];\r\n        }\r\n        if (util.isArray(source.references)) {\r\n            target = source.references.concat();\r\n        }\r\n        if (!target) {\r\n            return [];\r\n        }\r\n        target = target.map(function (item) {\r\n            if (item === \"lib.core.d.ts\" || item === \"core\") {\r\n                return util.combinePaths(binPath, targetVersion === 2 /* ES6 */ ? \"lib.core.es6.d.ts\" : \"lib.core.d.ts\");\r\n            }\r\n            if (item === \"lib.dom.d.ts\" || item === \"dom\") {\r\n                return util.combinePaths(binPath, \"lib.dom.d.ts\");\r\n            }\r\n            if (item === \"lib.scriptHost.d.ts\" || item === \"scriptHost\") {\r\n                return util.combinePaths(binPath, \"lib.scriptHost.d.ts\");\r\n            }\r\n            if (item === \"lib.webworker.d.ts\" || item === \"webworker\") {\r\n                return util.combinePaths(binPath, \"lib.webworker.d.ts\");\r\n            }\r\n            return item;\r\n        });\r\n        return grunt.file.expand(target);\r\n    }\r\n    if (keepDirectoryHierarchy) {\r\n        rootDir = undefined;\r\n    }\r\n    else {\r\n        basePath = undefined;\r\n    }\r\n    var result = {\r\n        targetFiles: getTargetFiles,\r\n        dest: dest,\r\n        singleFile: singleFile,\r\n        basePath: basePath,\r\n        keepDirectoryHierarchy: keepDirectoryHierarchy,\r\n        watch: prepareWatch(source, getTargetFiles()),\r\n        references: getReferences,\r\n        generateTsConfig: prepareGenerateTsConfig(source),\r\n        tsOptions: {\r\n            removeComments: boolOrUndef(source, \"removeComments\"),\r\n            sourceMap: boolOrUndef(source, \"sourceMap\"),\r\n            declaration: boolOrUndef(source, \"declaration\"),\r\n            out: singleFile ? dest : undefined,\r\n            outDir: singleFile ? undefined :\r\n                keepDirectoryHierarchy ? undefined : dest,\r\n            noLib: boolOrUndef(source, \"noLib\"),\r\n            noImplicitAny: boolOrUndef(source, \"noImplicitAny\"),\r\n            noResolve: boolOrUndef(source, \"noResolve\"),\r\n            target: targetVersion,\r\n            rootDir: rootDir,\r\n            module: prepareModule(source),\r\n            preserveConstEnums: boolOrUndef(source, \"preserveConstEnums\"),\r\n            noEmitOnError: boolOrUndef(source, \"noEmitOnError\", true),\r\n            suppressImplicitAnyIndexErrors: boolOrUndef(source, \"suppressImplicitAnyIndexErrors\"),\r\n            experimentalDecorators: boolOrUndef(source, \"experimentalDecorators\"),\r\n            emitDecoratorMetadata: boolOrUndef(source, \"emitDecoratorMetadata\"),\r\n            newLine: prepareNewLine(source),\r\n            inlineSourceMap: boolOrUndef(source, \"inlineSourceMap\"),\r\n            inlineSources: boolOrUndef(source, \"inlineSources\"),\r\n            noEmitHelpers: boolOrUndef(source, \"noEmitHelpers\"),\r\n            jsx: prepareJsx(source)\r\n        }\r\n    };\r\n    logger.verbose(\"--option\");\r\n    logger.verbose(JSON.stringify(result, null, \"  \"));\r\n    return result;\r\n}\r\nexports.createGruntOption = createGruntOption;\r\n","/home/travis/build/npmtest/node-npmtest-grunt-typescript/node_modules/grunt-typescript/tasks/modules/util.js":"///<reference path=\"../../typings/node.d.ts\" />\r\nvar _path = require(\"path\"), _fs = require(\"fs\"), _os = require(\"os\");\r\n/**\r\n * string 型かどうか\r\n */\r\nfunction isStr(val) {\r\n    return Object.prototype.toString.call(val) === \"[object String]\";\r\n}\r\nexports.isStr = isStr;\r\n/**\r\n * boolean 型かどうか\r\n */\r\nfunction isBool(val) {\r\n    return Object.prototype.toString.call(val) === \"[object Boolean]\";\r\n}\r\nexports.isBool = isBool;\r\n/**\r\n * 配列かどうか\r\n */\r\nfunction isArray(val) {\r\n    return Object.prototype.toString.call(val) === \"[object Array]\";\r\n}\r\nexports.isArray = isArray;\r\n/**\r\n * undefined かどうか\r\n */\r\nfunction isUndef(val) {\r\n    return typeof val === \"undefined\";\r\n}\r\nexports.isUndef = isUndef;\r\n/**\r\n * bin ディレクトリのパス\r\n */\r\nfunction getBinDir() {\r\n    return _path.dirname(require.resolve(\"typescript\"));\r\n}\r\nexports.getBinDir = getBinDir;\r\n//ts\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\nfunction hasProperty(value, key) {\r\n    return hasOwnProperty.call(value, key);\r\n}\r\nexports.hasProperty = hasProperty;\r\nvar colonCode = 0x3A;\r\nvar slashCode = 0x2F;\r\nfunction getRootLength(path) {\r\n    if (path.charCodeAt(0) === slashCode) {\r\n        if (path.charCodeAt(1) !== slashCode)\r\n            return 1;\r\n        var p1 = path.indexOf(\"/\", 2);\r\n        if (p1 < 0)\r\n            return 2;\r\n        var p2 = path.indexOf(\"/\", p1 + 1);\r\n        if (p2 < 0)\r\n            return p1 + 1;\r\n        return p2 + 1;\r\n    }\r\n    if (path.charCodeAt(1) === colonCode) {\r\n        if (path.charCodeAt(2) === slashCode)\r\n            return 3;\r\n        return 2;\r\n    }\r\n    var idx = path.indexOf(\"://\");\r\n    if (idx !== -1)\r\n        return idx + 3;\r\n    return 0;\r\n}\r\nexports.getRootLength = getRootLength;\r\n/**\r\n * パスの区切り文字を静音化(バックスラッシュをスラッシュに)\r\n */\r\nfunction normalizeSlashes(path) {\r\n    return path.replace(/\\\\/g, \"/\");\r\n}\r\nexports.normalizeSlashes = normalizeSlashes;\r\nvar directorySeparator = \"/\";\r\nfunction getNormalizedParts(normalizedSlashedPath, rootLength) {\r\n    var parts = normalizedSlashedPath.substr(rootLength).split(directorySeparator);\r\n    var normalized = [];\r\n    for (var _i = 0; _i < parts.length; _i++) {\r\n        var part = parts[_i];\r\n        if (part !== \".\") {\r\n            if (part === \"..\" && normalized.length > 0 && normalized[normalized.length - 1] !== \"..\") {\r\n                normalized.pop();\r\n            }\r\n            else {\r\n                if (part) {\r\n                    normalized.push(part);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return normalized;\r\n}\r\nfunction normalizePath(path) {\r\n    var spath = normalizeSlashes(path);\r\n    var rootLength = getRootLength(spath);\r\n    var normalized = getNormalizedParts(spath, rootLength);\r\n    return spath.substr(0, rootLength) + normalized.join(directorySeparator);\r\n}\r\nexports.normalizePath = normalizePath;\r\nfunction combinePaths(path1, path2) {\r\n    if (!(path1 && path1.length))\r\n        return path2;\r\n    if (!(path2 && path2.length))\r\n        return path1;\r\n    //if (path2.charAt(0) === directorySeparator) return path2;\r\n    if (getRootLength(path2) !== 0)\r\n        return path2;\r\n    if (path1.charAt(path1.length - 1) === directorySeparator)\r\n        return path1 + path2;\r\n    return path1 + directorySeparator + path2;\r\n}\r\nexports.combinePaths = combinePaths;\r\nfunction getDirectoryPath(path) {\r\n    return path.substr(0, Math.max(getRootLength(path), path.lastIndexOf(directorySeparator)));\r\n}\r\nexports.getDirectoryPath = getDirectoryPath;\r\nfunction readFile(fileName, encoding) {\r\n    if (!_fs.existsSync(fileName)) {\r\n        return undefined;\r\n    }\r\n    var buffer = _fs.readFileSync(fileName);\r\n    var len = buffer.length;\r\n    if (len >= 2 && buffer[0] === 0xFE && buffer[1] === 0xFF) {\r\n        // Big endian UTF-16 byte order mark detected. Since big endian is not supported by node.js,\r\n        // flip all byte pairs and treat as little endian.\r\n        len &= ~1;\r\n        for (var i = 0; i < len; i += 2) {\r\n            var temp = buffer[i];\r\n            buffer[i] = buffer[i + 1];\r\n            buffer[i + 1] = temp;\r\n        }\r\n        return buffer.toString(\"utf16le\", 2);\r\n    }\r\n    if (len >= 2 && buffer[0] === 0xFF && buffer[1] === 0xFE) {\r\n        // Little endian UTF-16 byte order mark detected\r\n        return buffer.toString(\"utf16le\", 2);\r\n    }\r\n    if (len >= 3 && buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {\r\n        // UTF-8 byte order mark detected\r\n        return buffer.toString(\"utf8\", 3);\r\n    }\r\n    // Default is UTF-8 with no byte order mark\r\n    return buffer.toString(\"utf8\");\r\n}\r\nexports.readFile = readFile;\r\nfunction writeFile(fileName, data, writeByteOrderMark) {\r\n    // If a BOM is required, emit one\r\n    if (writeByteOrderMark) {\r\n        data = '\\uFEFF' + data;\r\n    }\r\n    _fs.writeFileSync(fileName, data, \"utf8\");\r\n}\r\nexports.writeFile = writeFile;\r\nfunction abs(fileName) {\r\n    return normalizePath(_path.resolve(\".\", normalizePath(fileName)));\r\n}\r\nexports.abs = abs;\r\nfunction fileExists(path) {\r\n    return _fs.existsSync(path);\r\n}\r\nexports.fileExists = fileExists;\r\nfunction directoryExists(path) {\r\n    return _fs.existsSync(path) && _fs.statSync(path).isDirectory();\r\n}\r\nexports.directoryExists = directoryExists;\r\nfunction dirOrFileExists(path) {\r\n    return _fs.existsSync(path);\r\n}\r\nexports.dirOrFileExists = dirOrFileExists;\r\nfunction createDirectory(directoryName) {\r\n    if (!directoryExists(directoryName)) {\r\n        _fs.mkdirSync(directoryName);\r\n    }\r\n}\r\nexports.createDirectory = createDirectory;\r\nfunction createDirectoryRecurse(directoryName) {\r\n    if (directoryName.length > getRootLength(directoryName) && !directoryExists(directoryName)) {\r\n        var parentDirectory = getDirectoryPath(directoryName);\r\n        createDirectoryRecurse(parentDirectory);\r\n        //TODO:\r\n        createDirectory(directoryName);\r\n    }\r\n}\r\nexports.createDirectoryRecurse = createDirectoryRecurse;\r\nfunction getCurrentDirectory() {\r\n    return normalizePath(_path.resolve(\".\"));\r\n}\r\nexports.getCurrentDirectory = getCurrentDirectory;\r\nfunction relativePath(from, to) {\r\n    return _path.relative(from, to);\r\n}\r\nexports.relativePath = relativePath;\r\nfunction write(str) {\r\n    console.log(str);\r\n}\r\nexports.write = write;\r\nfunction writeAbort(str) {\r\n    console.log((str || \"\").red);\r\n}\r\nexports.writeAbort = writeAbort;\r\nfunction writeError(str) {\r\n    console.log(\">> \".red + str.trim().replace(/\\r/g, '').replace(/\\n/g, \"\\n>> \".red));\r\n}\r\nexports.writeError = writeError;\r\nfunction writeInfo(str) {\r\n    console.log(\">> \".cyan + str.trim().replace(/\\r/g, '').replace(/\\n/g, \"\\n>> \".cyan));\r\n}\r\nexports.writeInfo = writeInfo;\r\nfunction writeWarn(str) {\r\n    console.log(\">> \".yellow + str.trim().replace(/\\r/g, '').replace(/\\n/g, \"\\n>> \".yellow));\r\n}\r\nexports.writeWarn = writeWarn;\r\n","/home/travis/build/npmtest/node-npmtest-grunt-typescript/node_modules/grunt-typescript/tasks/modules/host.js":"///<reference path=\"../../typings/typescript.d.ts\" />\r\n///<reference path=\"../../typings/node.d.ts\" />\r\n///<reference path=\"../../typings/grunt.d.ts\" />\r\n///<reference path=\"./util.ts\" />\r\n///<reference path=\"../../typings/bluebird.d.ts\" />\r\n///<reference path=\"./task.ts\" />\r\nvar ts = require(\"typescript\");\r\nvar util = require(\"./util\");\r\nvar _path = require(\"path\"), _fs = require(\"fs\"), _os = require(\"os\"), existingDirectories = {};\r\nfunction createSourceFile(fileName, text, languageVersion) {\r\n    if (text !== undefined) {\r\n        var result = ts.createSourceFile(fileName, text, languageVersion);\r\n        result.mtime = _fs.statSync(fileName).mtime.getTime();\r\n        return result;\r\n    }\r\n}\r\nfunction directoryExists(directoryPath) {\r\n    if (util.hasProperty(existingDirectories, directoryPath)) {\r\n        return true;\r\n    }\r\n    //TODO:\r\n    if (util.directoryExists(directoryPath)) {\r\n        existingDirectories[directoryPath] = true;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction ensureDirectoriesExist(directoryPath) {\r\n    if (directoryPath.length > util.getRootLength(directoryPath) && !directoryExists(directoryPath)) {\r\n        var parentDirectory = util.getDirectoryPath(directoryPath);\r\n        ensureDirectoriesExist(parentDirectory);\r\n        //TODO:\r\n        util.createDirectory(directoryPath);\r\n    }\r\n}\r\nfunction prepareOutputDir(fileName, options) {\r\n    if (options.singleFile || !options.dest) {\r\n        return fileName;\r\n    }\r\n    var currentPath = util.getCurrentDirectory(), relativePath = util.normalizePath(_path.relative(currentPath, fileName)), basePath = options.basePath;\r\n    if (basePath) {\r\n        if (relativePath.substr(0, basePath.length) !== basePath) {\r\n            throw new Error(fileName + \" is not started basePath\");\r\n        }\r\n        relativePath = relativePath.substr(basePath.length);\r\n    }\r\n    return util.normalizePath(_path.resolve(currentPath, options.dest, relativePath));\r\n}\r\nfunction prepareSourcePath(sourceFileName, preparedFileName, contents, options) {\r\n    if (options.singleFile || !options.dest) {\r\n        return contents;\r\n    }\r\n    if (sourceFileName === preparedFileName) {\r\n        return contents;\r\n    }\r\n    if (!(/\\.js\\.map$/.test(sourceFileName))) {\r\n        return contents;\r\n    }\r\n    var mapData = JSON.parse(contents), source = mapData.sources[0];\r\n    mapData.sources.length = 0;\r\n    var relative = _path.relative(_path.dirname(preparedFileName), sourceFileName);\r\n    mapData.sources.push(util.normalizePath(_path.join(_path.dirname(relative), source)));\r\n    return JSON.stringify(mapData);\r\n}\r\nfunction getNewLineChar(options) {\r\n    var optValue = options.tsOptions.newLine;\r\n    if (optValue === 0 /* CarriageReturnLineFeed */) {\r\n        return \"\\r\\n\";\r\n    }\r\n    else if (optValue === 1 /* LineFeed */) {\r\n        return \"\\n\";\r\n    }\r\n    return _os.EOL;\r\n}\r\nfunction createHost(grunt, options, logger) {\r\n    var platform = _os.platform(), \r\n    // win32\\win64 are case insensitive platforms, MacOS (darwin) by default is also case insensitive\r\n    useCaseSensitiveFileNames = platform !== \"win32\" && platform !== \"win64\" && platform !== \"darwin\", sourceFileCache = {}, newSourceFiles = [], outputFiles = [];\r\n    function getCanonicalFileName(fileName) {\r\n        // if underlying system can distinguish between two files whose names differs only in cases then file name already in canonical form.\r\n        // otherwise use toLowerCase as a canonical form.\r\n        return useCaseSensitiveFileNames ? fileName : fileName.toLowerCase();\r\n    }\r\n    function getSourceFile(fileName, languageVersion, onError) {\r\n        logger.verbose(\"--host.getSourceFile: \" + fileName);\r\n        var fullName = util.abs(fileName), text = \"\";\r\n        if (fullName in sourceFileCache) {\r\n            var chechedSourceFile = sourceFileCache[fullName], newMtime = _fs.statSync(fullName).mtime.getTime();\r\n            if (chechedSourceFile.mtime !== newMtime) {\r\n                delete sourceFileCache[fullName];\r\n            }\r\n            else {\r\n                logger.verbose(\"  cached\");\r\n                return sourceFileCache[fullName];\r\n            }\r\n        }\r\n        if (!util.dirOrFileExists(fileName)) {\r\n            return;\r\n        }\r\n        try {\r\n            text = util.readFile(fileName, options.tsOptions.charset);\r\n        }\r\n        catch (e) {\r\n            if (onError) {\r\n                onError(e.message);\r\n            }\r\n            text = \"\";\r\n        }\r\n        var result = createSourceFile(fileName, text, languageVersion);\r\n        if (result) {\r\n            logger.verbose(\"  readed\");\r\n            sourceFileCache[fullName] = result;\r\n        }\r\n        return result;\r\n    }\r\n    function writeFile(fileName, data, writeByteOrderMark, onError) {\r\n        logger.verbose(\"--host.writeFile: \" + fileName);\r\n        var fullName = util.abs(fileName);\r\n        //        if(!options.singleFile && options.watch && !options.tsOptions.noEmit && newSourceFiles.length){\r\n        //            return;\r\n        //        }\r\n        //watch の時に新しいファイルだけ出力をしたいが、判定できないためコメントアウト\r\n        //        if(!options.singleFile){\r\n        //            let tsFile = fullName.replace(/\\.js\\.map$/, \".ts\").replace(/\\.js$/, \".ts\");\r\n        //            if(!(tsFile in newSourceFiles)){\r\n        //                tsFile = fullName.replace(/\\.d\\.ts$/, \".ts\");\r\n        //                if(!(tsFile in newSourceFiles)) {\r\n        //                    logger.verbose(\"  canceled\");\r\n        //                    return;\r\n        //                }\r\n        //            }\r\n        //        }\r\n        //出力先ディレクトリのパスに変換\r\n        if (!!options.keepDirectoryHierarchy) {\r\n            try {\r\n                var newFileName = prepareOutputDir(fileName, options);\r\n                //map ファイルの参照先パスを変換\r\n                var targetData = prepareSourcePath(fileName, newFileName, data, options);\r\n                logger.verbose(\"  change file path: \" + fileName + \" -> \" + newFileName);\r\n                fileName = newFileName;\r\n                data = targetData;\r\n                fullName = util.abs(fileName);\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n        try {\r\n            ensureDirectoriesExist(util.getDirectoryPath(util.normalizePath(fullName)));\r\n            //TODO:\r\n            util.writeFile(fullName, data, writeByteOrderMark);\r\n            outputFiles.push(fullName);\r\n            logger.verbose(\"  write file: \" + fullName);\r\n        }\r\n        catch (e) {\r\n            if (onError)\r\n                onError(e.message);\r\n        }\r\n    }\r\n    function writeResult(ms) {\r\n        var result = { js: [], m: [], d: [], other: [] }, resultMessage, pluralizeFile = function (n) { return (n + \" file\") + ((n === 1) ? \"\" : \"s\"); };\r\n        outputFiles.forEach(function (item) {\r\n            if (/\\.js$/.test(item))\r\n                result.js.push(item);\r\n            else if (/\\.js\\.map$/.test(item))\r\n                result.m.push(item);\r\n            else if (/\\.d\\.ts$/.test(item))\r\n                result.d.push(item);\r\n            else\r\n                result.other.push(item);\r\n        });\r\n        resultMessage = \"js: \" + pluralizeFile(result.js.length)\r\n            + \", map: \" + pluralizeFile(result.m.length)\r\n            + \", declaration: \" + pluralizeFile(result.d.length)\r\n            + \" (\" + ms + \"ms)\";\r\n        if (options.singleFile) {\r\n            if (result.js.length > 0) {\r\n                util.write(\"File \" + (result.js[0])[\"cyan\"] + \" created.\");\r\n            }\r\n            util.write(resultMessage);\r\n        }\r\n        else {\r\n            util.write(pluralizeFile(outputFiles.length)[\"cyan\"] + \" created. \" + resultMessage);\r\n        }\r\n    }\r\n    function reset(fileNames) {\r\n        if (util.isUndef(fileNames)) {\r\n            sourceFileCache = {};\r\n        }\r\n        if (util.isArray(fileNames)) {\r\n            fileNames.forEach(function (f) {\r\n                var fullName = util.abs(f);\r\n                if (fullName in sourceFileCache) {\r\n                    delete sourceFileCache[fullName];\r\n                }\r\n            });\r\n        }\r\n        outputFiles.length = 0;\r\n        newSourceFiles = [];\r\n    }\r\n    var newLineChar = getNewLineChar(options);\r\n    return {\r\n        getSourceFile: getSourceFile,\r\n        getDefaultLibFileName: function (options) {\r\n            logger.verbose(\"bin dir = \" + util.getBinDir());\r\n            return util.combinePaths(util.getBinDir(), options.target === 2 /* ES6 */ ? \"lib.es6.d.ts\" : \"lib.d.ts\");\r\n        },\r\n        writeFile: writeFile,\r\n        getCurrentDirectory: function () { return util.getCurrentDirectory(); },\r\n        useCaseSensitiveFileNames: function () { return useCaseSensitiveFileNames; },\r\n        getCanonicalFileName: getCanonicalFileName,\r\n        getNewLine: function () { return newLineChar; },\r\n        fileExists: function (path) { return util.fileExists(path); },\r\n        readFile: function (fileName) { return util.readFile(fileName); },\r\n        writeResult: writeResult,\r\n        reset: reset\r\n    };\r\n}\r\nexports.createHost = createHost;\r\n","/home/travis/build/npmtest/node-npmtest-grunt-typescript/node_modules/grunt-typescript/tasks/modules/compiler.js":"///<reference path=\"../../typings/typescript.d.ts\" />\r\n///<reference path=\"../../typings/node.d.ts\" />\r\n///<reference path=\"../../typings/grunt.d.ts\" />\r\n///<reference path=\"./util.ts\" />\r\n///<reference path=\"../../typings/bluebird.d.ts\" />\r\n///<reference path=\"./task.ts\" />\r\n///<reference path=\"./watcher.ts\" />\r\nvar ts = require(\"typescript\");\r\nvar util = require(\"./util\");\r\nvar watche = require(\"./watcher\");\r\nvar Promise = require(\"bluebird\");\r\nvar _os = require(\"os\");\r\nfunction execute(task) {\r\n    var host = task.getHost(), options = task.getOptions(), promise = new Promise(function (resolve, reject) {\r\n        if (options.watch) {\r\n            watch(task);\r\n        }\r\n        else {\r\n            try {\r\n                if (compile(task)) {\r\n                    resolve(undefined);\r\n                }\r\n                else {\r\n                    reject(false);\r\n                }\r\n            }\r\n            catch (e) {\r\n                reject(false);\r\n            }\r\n        }\r\n    });\r\n    return promise;\r\n}\r\nexports.execute = execute;\r\nfunction watch(task) {\r\n    var options = task.getOptions(), watchOpt = options.watch, watchPath = watchOpt.path, targetPaths = {}, startCompile = function (files) {\r\n        return runTask(task, watchOpt.before).then(function () {\r\n            if (!recompile(task, files)) {\r\n                //失敗だった場合はリセット\r\n                task.getHost().reset(files);\r\n            }\r\n            return runTask(task, watchOpt.after);\r\n        }).then(function () {\r\n            writeWatching(watchPath);\r\n        });\r\n    }, watcher = watche.createWatcher(watchPath, function (files, done) {\r\n        startCompile(Object.keys(files)).finally(function () {\r\n            done();\r\n        });\r\n    });\r\n    if (watchOpt.atBegin) {\r\n        startCompile().finally(function () {\r\n            watcher.start();\r\n        });\r\n    }\r\n    else {\r\n        watcher.start();\r\n    }\r\n}\r\nfunction writeWatching(watchPath) {\r\n    util.write(\"\");\r\n    util.write(\"Watching... \" + watchPath);\r\n}\r\nfunction recompile(task, updateFiles) {\r\n    if (updateFiles === void 0) { updateFiles = []; }\r\n    task.verbose(\"--task.recompile\");\r\n    task.getHost().reset(updateFiles);\r\n    return compile(task);\r\n}\r\nfunction runTask(task, tasks) {\r\n    var grunt = task.getGrunt();\r\n    task.verbose(\"--task.runTask\");\r\n    return asyncEach(tasks, function (taskName, index, next) {\r\n        task.verbose(\"  external task start: \" + taskName);\r\n        var flags = grunt.option.flags().map(function (f) { return !!f ? f + \"\" : \"\"; });\r\n        grunt.util.spawn({\r\n            cmd: undefined,\r\n            grunt: true,\r\n            args: [taskName].concat(flags),\r\n            opts: { stdio: 'inherit' }\r\n        }, function (err, result, code) {\r\n            task.verbose(\"external task end: \" + task);\r\n            next();\r\n        });\r\n    });\r\n}\r\nfunction asyncEach(items, callback) {\r\n    return new Promise(function (resolve, reject) {\r\n        var length = items.length, exec = function (i) {\r\n            if (length <= i) {\r\n                resolve(undefined);\r\n                return;\r\n            }\r\n            var item = items[i];\r\n            callback(item, i, function () {\r\n                i = i + 1;\r\n                exec(i);\r\n            });\r\n        };\r\n        exec(0);\r\n    });\r\n}\r\nfunction compile(task) {\r\n    var start = Date.now(), options = task.getOptions(), host = task.getHost(), targetFiles = getTargetFiles(options);\r\n    task.verbose(\"- write tsconfig.json\");\r\n    writeTsConfig(options, targetFiles, task);\r\n    task.verbose(\"- create program\");\r\n    var program = ts.createProgram(targetFiles, options.tsOptions, host);\r\n    var diagnostics = program.getSyntacticDiagnostics();\r\n    reportDiagnostics(diagnostics);\r\n    if (diagnostics.length) {\r\n        return false;\r\n    }\r\n    if (diagnostics.length === 0) {\r\n        diagnostics = program.getGlobalDiagnostics();\r\n        reportDiagnostics(diagnostics);\r\n        if (diagnostics.length === 0) {\r\n            diagnostics = program.getSemanticDiagnostics();\r\n            reportDiagnostics(diagnostics);\r\n        }\r\n    }\r\n    if (diagnostics.length) {\r\n        return false;\r\n    }\r\n    if (options.tsOptions.noEmit) {\r\n        host.writeResult(Date.now() - start);\r\n        return true;\r\n    }\r\n    task.verbose(\"- emit\");\r\n    var emitOutput = program.emit();\r\n    reportDiagnostics(emitOutput.diagnostics);\r\n    if (emitOutput.diagnostics.length) {\r\n        return false;\r\n    }\r\n    if (emitOutput.emitSkipped) {\r\n        task.verbose(\"  emit skipped\");\r\n    }\r\n    host.writeResult(Date.now() - start);\r\n    return true;\r\n}\r\nfunction getTargetFiles(options) {\r\n    var codeFiles = options.targetFiles(), libFiles = options.references();\r\n    return libFiles.concat(codeFiles);\r\n}\r\nfunction reportDiagnostic(diagnostic, isWarn) {\r\n    if (isWarn === void 0) { isWarn = false; }\r\n    var output = \"\", newLine = _os.EOL;\r\n    if (diagnostic.file) {\r\n        var loc = ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start);\r\n        output += diagnostic.file.fileName + \"(\" + (loc.line + 1) + \",\" + (loc.character + 1) + \"): \";\r\n    }\r\n    var category = ts.DiagnosticCategory[diagnostic.category].toLowerCase();\r\n    output += category + \" TS\" + diagnostic.code + \": \" + ts.flattenDiagnosticMessageText(diagnostic.messageText, newLine) + newLine;\r\n    if (isWarn) {\r\n        util.writeWarn(output);\r\n    }\r\n    else {\r\n        util.writeError(output);\r\n    }\r\n}\r\nfunction reportDiagnostics(diagnostics, isWarn) {\r\n    if (isWarn === void 0) { isWarn = false; }\r\n    for (var _i = 0; _i < diagnostics.length; _i++) {\r\n        var d = diagnostics[_i];\r\n        reportDiagnostic(d, isWarn);\r\n    }\r\n}\r\nfunction writeTsConfig(options, targetFiles, logger) {\r\n    if (!options.generateTsConfig) {\r\n        return;\r\n    }\r\n    var outputDir = util.getCurrentDirectory();\r\n    if (typeof options.generateTsConfig === \"string\") {\r\n        outputDir = util.abs(options.generateTsConfig.toString());\r\n    }\r\n    var outputFile = util.combinePaths(outputDir, \"tsconfig.json\");\r\n    logger.verbose(\"  dir: \" + outputDir + \", file: \" + outputFile);\r\n    var tsOpts = options.tsOptions;\r\n    var config = {\r\n        compilerOptions: {\r\n            removeComments: tsOpts.removeComments,\r\n            sourceMap: tsOpts.sourceMap,\r\n            declaration: tsOpts.declaration,\r\n            out: tsOpts.out,\r\n            outDir: tsOpts.outDir,\r\n            noLib: tsOpts.noLib,\r\n            noImplicitAny: tsOpts.noImplicitAny,\r\n            noResolve: tsOpts.noResolve,\r\n            target: tsOpts.target === 0 /* ES3 */ ? \"es3\" :\r\n                tsOpts.target === 1 /* ES5 */ ? \"es5\" :\r\n                    tsOpts.target === 2 /* ES6 */ ? \"es6\" : undefined,\r\n            rootDir: tsOpts.rootDir,\r\n            module: tsOpts.module === 2 /* AMD */ ? \"amd\" :\r\n                tsOpts.module === 1 /* CommonJS */ ? \"commonjs\" :\r\n                    tsOpts.module === 4 /* System */ ? \"system\" :\r\n                        tsOpts.module === 3 /* UMD */ ? \"umd\" : undefined,\r\n            preserveConstEnums: tsOpts.preserveConstEnums,\r\n            noEmitOnError: tsOpts.noEmitOnError,\r\n            suppressImplicitAnyIndexErrors: tsOpts.suppressImplicitAnyIndexErrors,\r\n            emitDecoratorMetadata: tsOpts.emitDecoratorMetadata,\r\n            newLine: tsOpts.newLine === 0 /* CarriageReturnLineFeed */ ? \"crlf\" :\r\n                tsOpts.newLine === 1 /* LineFeed */ ? \"lf\" : undefined,\r\n            inlineSourceMap: tsOpts.inlineSourceMap,\r\n            inlineSources: tsOpts.inlineSources,\r\n            noEmitHelper: tsOpts.noEmitHelpers\r\n        },\r\n        files: targetFiles.map(function (targetFile) { return util.normalizePath(util.relativePath(outputDir, targetFile)); })\r\n    };\r\n    util.createDirectoryRecurse(outputDir);\r\n    util.writeFile(outputFile, JSON.stringify(config, null, \"    \"));\r\n    util.writeInfo(\"tsconfig.json generated: \" + outputFile);\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-grunt-typescript/node_modules/grunt-typescript/tasks/modules/watcher.js":"///<reference path=\"../../typings/node.d.ts\" />\r\nvar util = require(\"./util\");\r\nvar _path = require(\"path\"), _fs = require(\"fs\");\r\nfunction createWatcher(watchPaths, callback) {\r\n    var chokidar = require(\"chokidar\"), watcher, timeoutId, callbacking = false, events = {};\r\n    function start() {\r\n        if (watcher) {\r\n            return;\r\n        }\r\n        watcher = chokidar.watch(watchPaths, { ignoreInitial: true, persistent: true, ignorePermissionErrors: true });\r\n        watcher.on(\"add\", function (path, stats) {\r\n            add(path, \"add\", stats);\r\n        }).on(\"change\", function (path, stats) {\r\n            add(path, \"change\", stats);\r\n        }).on(\"unlink\", function (path, stats) {\r\n            add(path, \"unlink\", stats);\r\n        }).on(\"error\", function (error) {\r\n            util.writeError(error);\r\n        });\r\n    }\r\n    function add(path, eventName, stats) {\r\n        if (_path.extname(path) !== \".ts\") {\r\n            return;\r\n        }\r\n        path = util.normalizePath(path);\r\n        if (stats && stats.mtime) {\r\n            events[path] = {\r\n                mtime: stats.mtime.getTime(),\r\n                ev: eventName\r\n            };\r\n        }\r\n        else {\r\n            events[path] = {\r\n                mtime: eventName === \"unlink\" ? 0 : _fs.statSync(path).mtime.getTime(),\r\n                ev: eventName\r\n            };\r\n        }\r\n        util.write(eventName.cyan + \" \" + path);\r\n        executeCallback();\r\n    }\r\n    function clone(value) {\r\n        var result = {};\r\n        Object.keys(value).forEach(function (item) {\r\n            result[item] = value[item];\r\n        });\r\n        return result;\r\n    }\r\n    function executeCallback() {\r\n        if (!Object.keys(events).length) {\r\n            return;\r\n        }\r\n        if (callbacking) {\r\n            return;\r\n        }\r\n        if (timeoutId) {\r\n            clearTimeout(timeoutId);\r\n        }\r\n        timeoutId = setTimeout(function () {\r\n            callbacking = true;\r\n            var value = clone(events);\r\n            events = {};\r\n            try {\r\n                callback(value, function () {\r\n                    callbacking = false;\r\n                    executeCallback();\r\n                });\r\n            }\r\n            catch (e) {\r\n                callbacking = false;\r\n            }\r\n        }, 1000);\r\n    }\r\n    return {\r\n        start: start\r\n    };\r\n}\r\nexports.createWatcher = createWatcher;\r\n"}